{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["mapContainerStyle","height","width","options","disableDefaultUI","zoomControl","center","lat","lng","markers","name","App","useLoadScript","googleMapsApiKey","isLoaded","loadError","React","useState","selected","setSelected","mapRef","useRef","onMapLoad","useCallback","map","current","id","zoom","onLoad","marker","position","onClick","onCloseClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMASMA,EAAoB,CACxBC,OAAQ,QACRC,MAAO,SAEHC,EAAU,CACdC,kBAAkB,EAClBC,aAAa,GAETC,EAAS,CACbC,IAAK,UACLC,IAAK,WAUDC,EAAU,CACd,CACEF,IAAK,UACLC,IAAK,UACLE,KAAM,UAER,CACEH,IAAK,UACLC,IAAK,UACLE,KAAM,WAIK,SAASC,IAAqB,IAAD,EACVC,YAAc,CAC5CC,iBAAkB,4CADZC,EADkC,EAClCA,SAAUC,EADwB,EACxBA,UADwB,EAKTC,IAAMC,SAAS,MALN,mBAKnCC,EALmC,KAKxBC,EALwB,KAQpCC,EAASJ,IAAMK,SACfC,EAAYN,IAAMO,aAAY,SAACC,GACnCJ,EAAOK,QAAUD,IAChB,IAGH,OAAIT,EAAkB,wCACjBD,EAGD,eAAC,IAAD,CACEY,GAAG,MACH1B,kBAAmBA,EACnB2B,KAAM,GACNrB,OAAQA,EACRH,QAASA,EACTyB,OAAQN,EANV,UAQEb,EAAQe,KAAI,SAACK,GAAD,OACV,cAAC,IAAD,CACEC,SAAU,CAAEvB,IAAKsB,EAAOtB,IAAKC,IAAKqB,EAAOrB,KACzCuB,QAAS,WACPZ,EAAYU,SAUdX,EACF,cAAC,IAAD,CACEY,SAAU,CAAEvB,IAAMW,EAAkBX,IAAKC,IAAMU,EAAkBV,KACjEwB,aAAc,WACZb,EAAY,OAHhB,SAME,gCACE,4BAAKD,EAAkBR,OACvB,4BAAKQ,EAAkBX,MACvB,4BAAKW,EAAkBV,WAGzB,QAtCY,6CCvDxB,IAYeyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjC,EAAD,MAEFkC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8ca469a8.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\n\n\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\",\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst center = {\n  lat: 52.229676,\n  lng: 21.012229,\n};\n\n// interface Marker {\n//   lat:number,\n//   lng:number,\n//   name:string,\n// }\n\n\nconst markers = [\n  {\n    lat: 52.229676,\n    lng: 21.012229,\n    name: \"TAXI 1\",\n  },\n  {\n    lat: 52.229011,\n    lng: 21.008102,\n    name: \"TAXI 2\",\n  }\n]\n\nexport default function App(): JSX.Element  {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyCzg9r8l4sQAcsiDQIyOYkNfp7fymOh8dg\",\n  \n  });\n  const [selected , setSelected] = React.useState(null);\n\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map:any) => {\n    mapRef.current = map;\n  }, []);\n\n\n  if (loadError) return <div>Error</div>;\n  if (!isLoaded) return <div>Loading...</div>;\n\n  return (\n      <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={16}\n        center={center}\n        options={options}\n        onLoad={onMapLoad}\n      > \n       {markers.map((marker:any) => (\n          <Marker\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n            // icon={{\n            //   url: `./taxi-svgrepo-com.svg`,\n            //   origin: new window.google.maps.Point(0, 0),\n            //   anchor: new window.google.maps.Point(15, 15),\n            //   scaledSize: new window.google.maps.Size(35, 35),\n            // }}\n          />\n          ))}\n           {selected ? (\n          <InfoWindow\n            position={{ lat: (selected! as any).lat, lng: (selected! as any).lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <p>{(selected! as any).name}</p>\n              <p>{(selected! as any).lat}</p>\n              <p>{(selected! as any).lng}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n  \n\n \n      </GoogleMap>\n  \n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}